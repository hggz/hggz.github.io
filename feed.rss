<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Silverpoint</title><description>A journal written in &lt;i&gt;Swift&lt;/i&gt; by Hugo A.G</description><link>https://hggz.github.io</link><language>en</language><lastBuildDate>Mon, 13 Jan 2020 00:09:15 +0000</lastBuildDate><pubDate>Mon, 13 Jan 2020 00:09:15 +0000</pubDate><ttl>250</ttl><atom:link href="https://hggz.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://hggz.github.io/posts/p4</guid><title>If it hurts, do it more frequently, and bring the pain forward</title><description>Automatically updating my site with github pages.</description><link>https://hggz.github.io/posts/p4</link><pubDate>Thu, 9 Jan 2020 12:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>If it hurts, do it more frequently, and bring the pain forward</h1><p>Thats a fun quote that sounds nonsensical at the surface level but is rooted in valuable meaning. The more frequent you do something painful, the less painful it'll seem. Thats where <a href="https://en.wikipedia.org/wiki/Continuous_integration">Continuous Integration</a> comes into play.</p><p>This blog post is about how I managed to host Silverpoint on github and to set it up so that anytime I commit my changes to the site, they get updated on the internet as well without me having to lift another finger.</p><h2>Hosting through Github Pages</h2><p>In the past I've leveraged anything from <a href="https://godaddy.com">godaddy</a> or <a href="https://hostgator.com">hostgator</a> to Amazon's server infrastructure or even S3 static buckets for website hosting. In the spirit of trying new things I decided to give github a chance this time around.</p><p><a href="https://pages.github.com">Github</a> allows you to serve websites from the git repository containing its code as long as long as you follow a specific naming convention and your repo has an index.html file. This is pretty convenient for people who want to host their own personal site or their company site without having to rely on a more complicated third party provider.</p><p>After setting up my empty <a href="https://github.com/hggz/hggz.github.io">repository</a> I was pretty much halfway done. The next part gets a little tricky though.</p><h2>Website Content and Personal Repositories</h2><p>As of this post's creation, github only allows personal websites to be served from the <code class="inline">master</code> branch of a repository. That means that all your website code (especially the <strong>index.html</strong>) has to live in your <code class="inline">master</code> branch. Organizations on the other hand can point their website code to a specific branch to be served from. Since I chose to have Silverpoint hosted as a personal repository, I had to work around this limitation.</p><p>Since all the HTML that <strong>Publish</strong> generates lives inside of the <strong>Output</strong> folder, I created a separate repository that only contained the contents of this Output folder and set that as the master branch. I kept all the other <strong>Publish</strong> specific files separate from this folder for this step.</p><p>Once this master branch was created and pushed up to the github repository, I was already able to access <a href="https://hggz.github.io">Silverpoint</a> via the github pages domain link. Afterwards I created a separate branch in this repository (called <strong>develop</strong>) that contained all of the <em>Publish</em> specific sources such as the <code class="inline">Package.swift</code> file, the <code class="inline">Content</code> folder, <code class="inilne">Resources</code>, etc. Now we're ready to set up the repository to automatically update itself when we push to Github.</p><h2>Continuous Integration Setup</h2><p>Recently Github released their CI flow known as <a href="https://github.com/features/actions">Github Actions</a> to the general public. This allows us to specify a workflow in our project to be executed after pushing up a commit to our repository.</p><p>For our purposes, we need a workflow that will run Publish's CLI and generate our static site's new changes in the <code class="inline">Output</code> folder.</p><p>For that we need a build instance that has Swift installed as well as Publish's CI in order to run the <code class="inline">publish run</code> command inside our repo. Finally, once that command is run, we have to make sure we publish our changes to the target branch of the repository that's serving our content. In our case, since this is a personal github page, we can only serve website content on the <strong>master</strong> branch as explained above.</p><h2>Integrating the Github Action</h2><p>The first thing I had to do was setup my github workflows folder in my project. I checked out my <strong>develop</strong> branch that contains all the Publish sources and created the <code class="inline">.github/workflows/</code> directories. Inside I placed a <strong>YAML</strong> file called <code class="inilne">gh-pages.yml</code>. Github will use this file to know what configuration workflow it has to run. In our case, it'll contain details for downloading swift and running the <strong>publish cli</strong>.</p><p>Afterwards I was able to save some time by finding a ready-made <a href="https://github.com/marketplace/actions/swift-publish-generate-static-site">github action</a> that <a href="https://github.com/joeblau">Joe Blau</a> made which handles most of the workflow we need. Feel free to follow the instructions provided at the action page, otherwise heres a summary of the steps.</p><ol><li><strong>Generate your deploy key with the following command.</strong></li></ol><pre><code>ssh-keygen -t rsa -b <span class="number">4096</span> -<span class="type">C</span> <span class="string">"$(git config user.email)"</span> -f gh-pages -<span class="type">N</span> <span class="string">""</span>
# <span class="type">You</span> will <span class="keyword">get</span> <span class="number">2</span> files:
#   gh-pages.<span class="dotAccess">pub</span> (public key)
#   gh-pages     (private key)
</code></pre><ol start="2"><li><strong>Add SSH deploy key on GitHub.com Go to Repository Settings</strong><ul><li>Go to <strong>Deploy Keys</strong> and add your public key with the <strong>Allow write access</strong> permission. <br/> <img src="https://github.com/joeblau/publish-generate-action/raw/master/.github/images/deploy-keys-1.jpg" width="50%" height="50%"/> <img src="https://github.com/joeblau/publish-generate-action/raw/master/.github/images/deploy-keys-2.jpg" width="50%" height="50%"/></li><li>Go to <strong>Secrets</strong> and add your private key as <code class="inline">ACTIONS_DEPLOY_KEY</code> <br/> <img src="https://github.com/joeblau/publish-generate-action/raw/master/.github/images/secrets-1.jpg" width="50%" height="50%"/> <img src="https://github.com/joeblau/publish-generate-action/raw/master/.github/images/secrets-2.jpg" width="50%" height="50%"/></li></ul></li></ol><ol start="3"><li><strong>Update the project YAML file at .github/workflows/gh-pages.yml and push to the default branch.</strong> <br/> <br/> <em>Note: In our case, the <strong>push branch</strong> and the <strong>publish branches</strong> are different</em> <br/> <br/></li></ol><pre><code>name: <span class="type">Github Pages</span>

on:
  push:
    branches:
    - develop 

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: <span class="type">Checkout</span>
      uses: actions/checkout@v1
      
    - name: <span class="type">Install Swift</span>
      uses: <span class="type">YOCKOW</span>/<span class="type">Action</span>-setup-swift@master
      with:
        swift-version: '<span class="number">5.1.2</span>'
        
    - name: <span class="type">Build Publish</span>
      run: |
        git clone https://github.<span class="property">com</span>/<span class="type">JohnSundell</span>/<span class="type">Publish</span>.<span class="property">git</span>
        cd <span class="type">Publish</span>
        swift build -c release
        sudo install .<span class="dotAccess">build</span>/release/publish-cli /usr/local/bin/publish

    - name: <span class="type">Generate Site</span>
      run: publish generate

    - name: <span class="type">Deploy</span>
      uses: peaceiris/actions-gh-pages@v2
      env:
        <span class="type">ACTIONS_DEPLOY_KEY</span>: ${{ secrets.<span class="type">ACTIONS_DEPLOY_KEY</span> }}
        <span class="type">PUBLISH_BRANCH</span>: master
        <span class="type">PUBLISH_DIR</span>: ./<span class="type">Output</span>

</code></pre><p>Once you push up your <strong>on push</strong> branch specified in the YAML (<strong>develop</strong> in my case) you should be able to check the status of your deployment and the final result on your <strong>PUBLISH_BRANCH</strong> From here on out, enjoy the speed and convenience of pushing up changes to your Swift Site!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://hggz.github.io/posts/p3</guid><title>So you want to theme a swift site?</title><description>Adding my first custom theme to Silverpoint.</description><link>https://hggz.github.io/posts/p3</link><pubDate>Wed, 8 Jan 2020 12:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>So you want to theme a swift site?</h1><p>I only have positive things to say about <a href="https://github.com/JohnSundell">John Sundell</a> after working with his suite of swift web framework tools. Naturally the first thing I set out to do after setting up the publish template was to personalize it with a custom theme.</p><p>This post details the steps I took in order to accomplish that. For more details on the original implementation documentation, feel free to <a href="https://github.com/JohnSundell/Publish#building-an-html-theme">this</a> out.</p><h2>Setting up your theme extension</h2><p>Normally you would rely on a variation of customized style sheets with some scripting languages here or there (especially with frameworks such as React or Rails) to get the job done with traditional static / dynamic web frameworks.</p><p>In Publish's case, we're able to still rely on css while also relying on statically typed conventions thanks to the underlying pure swift HTML generation provided by <code class="inline">Plot</code>. The way we do that is by first creating a <code class="inline">Theme </code>extension with a single statically defined member to function as the theme's name. We will also be creating a struct that follows the <code class="inline">HTMLFactory</code> protocol to leverage Plot's HTML creation engine.</p><p>I will be specifying this theme to interface directly with my site as well.</p><p><em>NOTE: As of this post, Silverpoint was constructed as a personal github pages site and thus is named to follow that naming <a href="https://pages.github.com">convention</a>.</em></p><pre><code><span class="keyword">import</span> Publish
<span class="keyword">import</span> Plot

<span class="keyword">extension</span> <span class="type">Theme</span> <span class="keyword">where</span> <span class="type">Site</span> == <span class="type">Hggzgithubio</span> {
    <span class="keyword">static var</span> hggz: <span class="type">Self</span> {
        <span class="type">Theme</span>(
            htmlFactory: <span class="type">HggzHTMLFactory</span>()
        )
    }
}
</code></pre><p>You'll notice at this point that we have yet to define our <code class="inline">HTMLFactory</code> struct that follows the conventions set in place for laying out our sites various html pages. We'll cover that next.</p><h2>Creating your theme's HTML</h2><p>At its core, all a web browser needs to display content is an html file. You can format your website in any order or style by supplying it the html files of its pages. The way Publish organizes its content is through the use of 3 logical representations: <b>Sections</b>, <b>items</b> and <b>pages</b>.</p><p>As pointed out on the Publish framework's readme, each <code class="inline">Section</code>, <code class="inline">Item</code>, and <code class="inline">Page</code> can define its own set of Content — which can range from text (like titles and descriptions), to HTML, audio, video and various kinds of metadata.</p><p>We'll start off by declaring our struct that conforms to the <code class="inline">HTMLFactory</code> protocol.</p><pre><code><span class="keyword">private struct</span> HggzHTMLFactory: <span class="type">HTMLFactory</span> {
    <span class="keyword">typealias</span> Site = <span class="type">HggzGithubio</span>
    
    <span class="keyword">func</span> makePageHTML(for page: <span class="type">Page</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">HggzHTMLFactory</span>.<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> { }

    <span class="keyword">func</span> makeIndexHTML(for index: <span class="type">Index</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">HggzHTMLFactory</span>.<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> { }

    <span class="keyword">func</span> makeTagListHTML(for page: <span class="type">TagListPage</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">HggzHTMLFactory</span>.<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>? { }

    <span class="keyword">func</span> makeTagDetailsHTML(for page: <span class="type">TagDetailsPage</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">HggzHTMLFactory</span>.<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>? { }

    <span class="keyword">func</span> makeItemHTML(for item: <span class="type">Item</span>&lt;<span class="type">HggzHTMLFactory</span>.<span class="type">Site</span>&gt;, context: <span class="type">PublishingContext</span>&lt;<span class="type">HggzHTMLFactory</span>.<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> { }

    <span class="keyword">func</span> makeSectionHTML(for section: <span class="type">Section</span>&lt;<span class="type">HggzHTMLFactory</span>.<span class="type">Site</span>&gt;, context: <span class="type">PublishingContext</span>&lt;<span class="type">HggzHTMLFactory</span>.<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> { }
}
</code></pre><p>The following snippet shows the available functions available from the <code class="inline">HTMLFactory</code> protocol as well as the overriding of the <code class="inline">Site</code> associtedtype so the generic constraints in the struct know that we're referring to our specific site. This allows us to access some of the site specific properties our site has in the factory class, like our specific sectionId's, our metadata, etc.</p><p>You can use these functions to describe how each section's HTML will look, as well as the html in all the various other parts of our site such as the specific items (our posts like this one).</p><p>When populating each of the functions, you need to provide it some type safe swift HTML. You write it using Plot's html structures in a format similar to how you would lay out regular html tags. Heres an example of how you can lay out the html for the index of the website.</p><pre><code><span class="keyword">func</span> makeIndexHTML(for index: <span class="type">Index</span>,
                   context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
    <span class="type">HTML</span>(
        .<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
        .<span class="call">head</span>(for: index, on: context.<span class="property">site</span>),
        .<span class="call">body</span>(
            .<span class="call">header</span>(for: context, selectedSection: <span class="keyword">nil</span>),
            .<span class="call">wrapper</span>(
                .<span class="call">h1</span>(.<span class="call">text</span>(index.<span class="property">title</span>)),
                .<span class="call">itemList</span>(
                    for: context.<span class="call">allItems</span>(
                        sortedBy: \.<span class="property">date</span>,
                        order: .<span class="dotAccess">descending</span>
                    ),
                    on: context.<span class="property">site</span>
                )
            ),
            .<span class="call">footer</span>(for: context.<span class="property">site</span>)
        )
    )
}
</code></pre><p>I decided to rely heavily on the initial <code class="inline">Foundation</code> theme provided by JohnSundell <a href="https://github.com/JohnSundell/Publish/commit/ef3cd95bc4b4307c516b7538c6c2dfcc943fc7a8#diff-e4f4d4927f56c44345fc9efc87ff25e2">here</a>. Hopefully once you check it out you'll see how extensible it is to modify it for your needs.</p><p>It was in the <code class="inline">itemList</code> helper function that I leveraged my <a href="https://hggz.github.io/posts/p2/">prettyPrint Date extension function</a> to display dates on each post.</p><pre><code><span class="keyword">static func</span> itemList&lt;T: <span class="type">Website</span>&gt;(for items: [<span class="type">Item</span>&lt;<span class="type">T</span>&gt;], on site: <span class="type">T</span>) -&gt; <span class="type">Node</span> {
    <span class="keyword">return</span> .<span class="call">ul</span>(
        .<span class="call">class</span>(<span class="string">"item-list"</span>),
        .<span class="call">forEach</span>(items) { item <span class="keyword">in</span>
            .<span class="call">li</span>(.<span class="call">article</span>(
                .<span class="call">h1</span>(.<span class="call">a</span>(
                    .<span class="call">href</span>(item.<span class="property">path</span>),
                    .<span class="call">text</span>(item.<span class="property">title</span>)
                    )),
                .<span class="call">p</span>(.<span class="call">class</span>(<span class="string">"date-text"</span>), .<span class="dotAccess">text</span>(item.<span class="property">date</span>.<span class="call">prettyPrintDate</span>())),
                .<span class="call">br</span>(),
                .<span class="call">tagList</span>(for: item, on: site),
                .<span class="call">p</span>(.<span class="call">text</span>(item.<span class="property">description</span>))
                ))
        }
    )
}

</code></pre><h2>Adding your CSS</h2><p>You'll notice in the snippet above that the HTML is leveraging 2 'classes'. One for the list ('item-list') and one for the date ('date-text'). Thats no mistake. Those elements are leveraging a css style sheet for those classes.</p><p>In order to have Publish utilize your custom css, you must provide your theme a resource path pointing to it. You do this in the static member <code class="inline">Theme</code> declaration above.</p><pre><code><span class="keyword">extension</span> <span class="type">Theme</span> <span class="keyword">where</span> <span class="type">Site</span> == <span class="type">Hggzgithubio</span> {
    <span class="keyword">static var</span> hggz: <span class="type">Self</span> {
        <span class="type">Theme</span>(
            htmlFactory: <span class="type">HggzHTMLFactory</span>(),
            resourcePaths: [<span class="string">"Resources/HggzTheme/styles.css"</span>]
        )
    }
}
</code></pre><p>I created a <code class="inline">Resources</code> directory in the root directory with the <code class="inline">Package.swift</code> file and followed the convention above with a subdirectory named after the theme and the actual css file. I also leveraged the <a href="https://github.com/JohnSundell/Publish/commit/ef3cd95bc4b4307c516b7538c6c2dfcc943fc7a8#diff-98456e10ede04c3921630ce432dac1cd">css file</a> utilized by the <code class="inline">Foundation</code> theme as a starting point and modified it myself.</p><h2>Testing your changes</h2><p>With all this said and done, all that was left was updating the <code class="inline">main.swift</code> file to use your new theme. You should now be able to see your changes on the browser.</p><p>The Publish framework has a provided CLI application that handles most of the development needs for any website work. I developed the site on XCode but should have been perfectly capable handling the development on any other platform.</p><p>My personal workflow consisted of me running the local development server by running <code class="inline">publish run</code> in the project directory and running the site binary on XCode everytime I wanted to visualize changes. I was able to view my site on http://localhost:8000.</p><p><em>NOTE: As of this post, I noticed that some css changes weren't immediately reflected after refreshing the browser page. I got around this by doing a hard refresh in the browser. I used Safari and Chrome to test my changes.</em></p>]]></content:encoded></item><item><guid isPermaLink="true">https://hggz.github.io/posts/p2</guid><title>What is time?</title><description>Pretty printing dates with foundation.</description><link>https://hggz.github.io/posts/p2</link><pubDate>Tue, 7 Jan 2020 14:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>What is time?</h1><p>This wouldn't be a swift blog (or atleast a blog written in swift) without mention of some of the extensions I've come across / made use of in my travels.</p><p>I've decided that I want this to be the first post of many that introduces an extension that I've leveraged. Some of these will be trivial, some will be more complex. Whichever the case, take what you like and leave the rest.</p><p><em>Note: I'm always open for a good debate on proper stylistic conventions and use cases. I don't pretend to know everything and value learning above all. For now, feel free to <a href="mailto:hagonzalez94@gmail.com">email</a> me directly with any opinions and perhaps I'll feature you on a post.</em></p><h2>Goal</h2><p>Part of writing a blog entirely in swift is coming to terms with the fact that not everything will be provided for you. Inlcuding (as of this post) an out of the box way for the site generator to automatically display timestamps on my posts.</p><p>That being said, this simple extension provides a helper function to return a nicer looking string from any given <code class="inline">Date</code> object in the format of <code class="inline">Month, day, year</code>. The extension automatically formats the date using this format but can accept other ISO 8601 compliant formats.</p><p><em>Note: For a more complete reference, feel free check <a href="https://nsdateformatter.com">this</a> out</em></p><p>The extension makes use of the <code class="inline">DateFormatter</code> class from the <code class="inline">Foundation</code> library and assumes that the inputted date isn't <code class="inline">nil</code>. There you go, quick and simple.</p><h2>Extension</h2><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">extension</span> <span class="type">Date</span> {
    <span class="keyword">func</span> prettyPrintDate(withFormat format: <span class="type">String</span> = <span class="string">"MMM dd, yyyy"</span>) -&gt; <span class="type">String</span> {
        <span class="keyword">let</span> dateFormatter = <span class="type">DateFormatter</span>()
        dateFormatter.<span class="property">dateFormat</span> = format
        <span class="keyword">return</span> dateFormatter.<span class="call">string</span>(from: <span class="keyword">self</span>)
    }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://hggz.github.io/posts/p1</guid><title>Cui dono lepidum novum libellum?</title><description>Silverpoint - a journal written in swift!</description><link>https://hggz.github.io/posts/p1</link><pubDate>Sun, 5 Jan 2020 14:09:00 +0000</pubDate><content:encoded><![CDATA[<h1>Cui dono lepidum novum libellum?</h1><p>It's been a few years since I last posted anything substantive on the internet, mainly due to my development preferences. So what better way to re-acquaint myself with the web than by writing my entire blog in <b>Swift</b>?!</p><p><em>Note: This post is not intended to be an in depth technical one with benchmarked data backing the opinions expressed. This is more of an opinionated opener to a series of posts to come.</em></p><p><em>TLDR; My goal for the next coming years is to see how far I can take Swift as a general purpose first class language outside of Apple's development ecosystem.</em></p><h2>Why Swift?</h2><p>As of this post, the internet is still heavily dominated by <b>Javascript</b> and many other popular web frameworks written in anything from <b>Ruby</b> to <b>Go</b>. Even <b>Rust</b> is trying its hand at world domination.</p><p>I've decided to take the road less traveled despite there being so many other more efficient and readily available tools out there because I both love and believe in <b>Swift</b>.</p><p>Realistically speaking, I could have definitely gotten away with using any number of the more mature technologies out there. I've always found myself switching between languages depending on what needed to get done. I've always thought of <b>Python</b> as the 'getting stuff done' language to automate tasks or prototype extensive programs in a script or 2. Anything more I've always found myself utilizing something more robust such as <b>Java</b> or <b>C++</b> / <b>C#</b>.</p><p>On the other hand, Swift is versatile and the developer experience is phenominal. It's an elegant language by design. It like a programatic memoir that encompasses the values you see force fed upon us by apple's products and HIG. It can be as concise or verbose as you need it to be without feeling 'awkward'</p><p>And last but not least, Swift leverages the benefits of LLVM. Theoretically, theres nothing stopping universal portability among all the platforms <b>LLVM</b> supports</p><h2>Goal</h2><p>Swift has been primarily used for <b>iOS / MacOS</b> development but over the last few years I've seen the community grow quickly after Apple open sourced the language.</p><p>I've seen 1 guy spear head swift's development on the <b>Windows</b> platform, and have seen it become an integral part in machine learning work through its <b>TensorFlow</b> branch.</p><p>By using <b>Swift</b> for other tasks outside of apple app development, I hope to not only support its growing community but to also contribute to it directly.</p><p>Hopefully by the time this new decade is over, <b>Swift</b> will have become a first class language for anything outside of pure iOS development instead of fading into obscurity or being locked into apple's ecosystem forever. Only time and community involvement will tell whether or not the former becomes the case.</p>]]></content:encoded></item></channel></rss>